import os
import logging
from get_data.get_data import get_data_cw, get_data_stock, get_codes, get_driver, get_danh_sach, get_chi_so_chung
from dotenv import load_dotenv

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def print_help():
    """Print help information."""
    help_text = """
üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:

üîπ Xem th√¥ng tin c·ªï phi·∫øu:
   Nh·∫≠p m√£ c·ªï phi·∫øu (VD: VNM, FPT)

üîπ Xem th√¥ng tin ch·ª©ng quy·ªÅn:
   Nh·∫≠p m√£ CW (8 k√Ω t·ª±, VD: FPTB1C001)

üîπ Xem ch·ªâ s·ªë ch·ª©ng kho√°n:
   Nh·∫≠p VNINDEX, VN30, ho·∫∑c HNXINDEX

üîπ Xem danh s√°ch m√£:
   Nh·∫≠p ALL

üîπ Tho√°t ch∆∞∆°ng tr√¨nh:
   Nh·∫≠p exit ho·∫∑c quit

üìå L∆∞u √Ω:
‚Ä¢ Nh·∫≠p ch√≠nh x√°c m√£ ch·ª©ng kho√°n
‚Ä¢ D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c
"""
    print(help_text)

def process_input(content):
    """Process user input and return the result."""
    content = content.strip().upper()
    driver = get_driver()
    try:
        # Process index
        if content in ["VNINDEX", "VN30", "HNXINDEX"]:
            map_data = get_chi_so_chung(content, driver)
            response = (
                f"\n {map_data['ma']}\n"
                f"G: {map_data['index']}\n"
                f"T: {map_data['thay_doi']}\n"
                f"TL: {map_data['ti_le_thay_doi']}\n"
            )
            return response
            
        # Process ALL command
        if content == "ALL":
            response = get_danh_sach(driver)
            return f"\n{response}\n"
            
        # Process CW code (8 characters)
        if len(content) == 8:
            data = get_data_cw(content, driver)
            response = (
                f"\n {data['code']}\n"
                f"G: {data['gia']}\n"
                f"T: {data['thay_doi']}\n"
                f"Base: {data['base_stock']}\n"
                f"HV: {data['gia_hoa_von']}\n"
                f"TL HV: {data['ti_le_gia_hoa_von']}\n"
                f"SNƒêH: {data['so_ngay_den_han']}\n"
            )
            return response
            
        # Process stock code (3 characters)
        if len(content) == 3:
            data = get_data_stock(content, driver)
            response = (
                f"\n {data['code']}\n"
                f"G: {data['gia']}\n"
                f"T: {data['thay_doi']}\n"
                f"N: {data['nuoc_ngoai']}\n"
            )
            return response
            
        # Help command
        if content in ["HELP", "HUONGDAN"]:
            return ""
            
        # Invalid input
        return "\n‚ùå M√£ kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu (3 k√Ω t·ª±), m√£ CW (8 k√Ω t·ª±), ho·∫∑c c√°c l·ªánh h·ªó tr·ª£.\nG√µ HELP ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.\n"
        
    except Exception as e:
        logger.error(f"Error processing input: {e}", exc_info=True)
        return "\n‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.\n"

def main():
    """Main function to run the CLI application."""
    # Load environment variables
    load_dotenv()
    
    
    while True:
        try:
            user_input = input("Nh·∫≠p: ").strip()
            
            # Check for exit commands
            if user_input.lower() in ['exit', 'quit', 'thoat']:
                break
                
            # Process the input
            if user_input.upper() in ['HELP', 'HUONGDAN']:
                print_help()
            else:
                result = process_input(user_input)
                print(result)
        except KeyboardInterrupt:
            break
        except Exception as e:
            logger.error(f"Unexpected error: {e}", exc_info=True)
            print("\n‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.\n")

if __name__ == "__main__":
    main()
